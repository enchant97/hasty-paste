package components

import (
	"fmt"
    "time"
    "bytes"
	"github.com/enchant97/hasty-paste/app/database"
	"github.com/enchant97/hasty-paste/app/core"
)

templ PastePage(username string, paste database.Paste, attachments []database.Attachment) {
	@base("Paste") {
		@header()
		<div class="p-2 gap-2 flex flex-col">
            <h1 class="my-2">{ paste.Slug }</h1>
			<div class="bg-base-light-200 dark:bg-base-dark-200 rounded-md shadow-sm p-4">
				<h2 class="my-2">Info</h2>
                <table class="text-left text-sm">
                    <tbody>
                        <tr>
                            <th class="pr-4">Owner</th>
                            <td><a
                                class="italic underline"
                                href={ templ.URL(fmt.Sprintf("/@/%s", username)) }
                            >{ username }</a></td>
                        </tr>
                        <tr>
                            <th class="pr-4">Created At</th>
                            <td><time
                                class="italic"
                                datetime={ paste.CreatedAt.Format(time.RFC3339) }
                            >{ paste.CreatedAt.Format(time.DateOnly) }
                            </time></td>
                        </tr>
                        if paste.ExpiresAt.Valid {
                            <tr>
                                <th class="pr-4">Expires At</th>
                                <td><time
                                    class="italic"
                                    datetime={ paste.ExpiresAt.Time.Format(time.RFC3339) }
                                >{ paste.ExpiresAt.Time.Format(time.DateOnly) }
                                </time></td>
                            </tr>
                        }
                        <tr>
                            <th class="pr-4">Visibility</th>
                            <td>{ paste.Visibility }</td>
                        </tr>
                    </tbody>
                </table>
			</div>
			<div class="bg-base-light-200 dark:bg-base-dark-200 rounded-md shadow-sm p-4">
				<h2 class="my-2">Attachments</h2>
				if len(attachments) == 0 {
					<p>No attachments were uploaded.</p>
				} else {
					<ul class="flex gap-4">
						for _, attachment := range attachments {
							<li class="btn btn-neutral px-4 py-2">
								<a
									target="_blank"
									href={ templ.URL(fmt.Sprintf("/@/%s/%s/%s", username, paste.Slug, attachment.Slug)) }
								>
									{ attachment.Slug }
								</a>
							</li>
						}
					</ul>
				}
			</div>
			<div class="bg-base-light-200 dark:bg-base-dark-200 rounded-md shadow-sm p-4">
				<h2 class="my-2">Content</h2>
                if paste.ContentFormat == "markdown" {
                    {{ var buf bytes.Buffer }}
                    {{ core.RenderMarkdown([]byte(paste.Content), &buf) }}
                    <div class="prose dark:prose-invert prose-zinc max-w-none bg-base-light-100 dark:bg-base-dark-100 p-4 rounded-md shadow-sm">@templ.Raw(buf.String())</div>
                }
                else if paste.ContentFormat == "plain" {
                    <pre class="text-wrap font-sans bg-base-light-100 dark:bg-base-dark-100 p-4 rounded-md shadow-sm">{ paste.Content }</pre>
                }
                else {
                    {{ var buf bytes.Buffer }}
                    {{ core.RenderSourceCode(paste.ContentFormat, paste.Content, &buf) }}
                    <pre class="overflow-x-auto font-mono bg-[#0d1117] p-4 rounded-md shadow-sm">@templ.Raw(buf.String())</pre>
                }
			</div>
		</div>
		@footer()
	}
}
